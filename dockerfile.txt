# Enhanced Document AI Multi-Agent Assistant
# Production-ready Docker container with security and performance optimizations

FROM python:3.9-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements_enhanced.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements_enhanced.txt

# Copy application code
COPY . .

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/metadata_exports /app/state \
    && chown -R appuser:appuser /app

# Copy health check script
COPY docker-healthcheck.py /app/
RUN chmod +x /app/docker-healthcheck.py

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 7860

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python /app/docker-healthcheck.py || exit 1

# Default command
CMD ["python", "enhanced_ui.py"]

# Multi-stage build for development
FROM base as development

# Switch back to root for development tools
USER root

# Install development dependencies
RUN pip install --no-cache-dir \
    ipython \
    jupyter \
    pytest-watch \
    debugpy

# Development command
CMD ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "--wait-for-client", "enhanced_ui.py"]

# Production stage
FROM base as production

# Production optimizations
ENV PYTHONOPTIMIZE=1

# Remove development files
RUN find /app -name "*.py[co]" -delete \
    && find /app -name "__pycache__" -delete

# Final production command
CMD ["python", "-O", "enhanced_ui.py"]
